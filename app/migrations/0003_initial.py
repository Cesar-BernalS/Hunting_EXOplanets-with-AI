# Generated by Django 5.2.7 on 2025-10-05 00:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app', '0002_delete_candidate'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExoplanetDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre del Dataset')),
                ('mission', models.CharField(max_length=50, verbose_name='Misión')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('source_url', models.URLField(verbose_name='URL de Origen')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExoplanetCandidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('koi_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='KOI ID')),
                ('tess_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='TESS ID')),
                ('orbital_period', models.FloatField(help_text='Período orbital en días', verbose_name='Período Orbital')),
                ('transit_duration', models.FloatField(help_text='Duración del tránsito en horas', verbose_name='Duración del Tránsito')),
                ('planetary_radius', models.FloatField(help_text='Radio planetario en radios terrestres', verbose_name='Radio Planetario')),
                ('stellar_radius', models.FloatField(help_text='Radio estelar en radios solares', verbose_name='Radio Estelar')),
                ('stellar_mass', models.FloatField(help_text='Masa estelar en masas solares', verbose_name='Masa Estelar')),
                ('stellar_effective_temperature', models.FloatField(help_text='Temperatura efectiva estelar en Kelvin', verbose_name='Temperatura Estelar')),
                ('transit_depth', models.FloatField(help_text='Profundidad del tránsito (adimensional)', verbose_name='Profundidad del Tránsito')),
                ('impact_parameter', models.FloatField(help_text='Parámetro de impacto', verbose_name='Parámetro de Impacto')),
                ('equilibrium_temperature', models.FloatField(help_text='Temperatura de equilibrio en Kelvin', verbose_name='Temperatura de Equilibrio')),
                ('classification', models.CharField(choices=[('CONFIRMED', 'Exoplaneta Confirmado'), ('CANDIDATE', 'Candidato Planetario'), ('FALSE_POSITIVE', 'Falso Positivo'), ('UNKNOWN', 'Desconocido')], default='UNKNOWN', max_length=20, verbose_name='Clasificación')),
                ('ml_prediction', models.CharField(blank=True, choices=[('CONFIRMED', 'Exoplaneta Confirmado'), ('CANDIDATE', 'Candidato Planetario'), ('FALSE_POSITIVE', 'Falso Positivo'), ('UNKNOWN', 'Desconocido')], max_length=20, null=True, verbose_name='Predicción ML')),
                ('ml_confidence', models.FloatField(blank=True, help_text='Puntuación de confianza del modelo ML', null=True, verbose_name='Confianza ML')),
                ('additional_data', models.JSONField(blank=True, default=dict, verbose_name='Datos Adicionales')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.exoplanetdataset', verbose_name='Dataset')),
            ],
            options={
                'verbose_name': 'Candidato a Exoplaneta',
                'verbose_name_plural': 'Candidatos a Exoplanetas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, verbose_name='ID de Sesión')),
                ('analysis_parameters', models.JSONField(blank=True, default=dict, verbose_name='Parámetros de Análisis')),
                ('analysis_results', models.JSONField(blank=True, default=dict, verbose_name='Resultados del Análisis')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
                ('selected_dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.exoplanetdataset', verbose_name='Dataset Seleccionado')),
            ],
            options={
                'verbose_name': 'Sesión de Análisis',
                'verbose_name_plural': 'Sesiones de Análisis',
            },
        ),
        migrations.CreateModel(
            name='PredictionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_data', models.JSONField(verbose_name='Datos de Entrada')),
                ('prediction', models.CharField(max_length=20, verbose_name='Predicción')),
                ('confidence', models.FloatField(verbose_name='Confianza')),
                ('prediction_details', models.JSONField(blank=True, default=dict, verbose_name='Detalles de Predicción')),
                ('api_endpoint', models.URLField(verbose_name='Endpoint de API')),
                ('api_response', models.JSONField(blank=True, default=dict, verbose_name='Respuesta de API')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Solicitud de Predicción',
                'verbose_name_plural': 'Solicitudes de Predicción',
                'ordering': ['-created_at'],
            },
        ),
    ]
